''' 
@imports
    PyQt6
    os
    shutil
    datetime

@params
    need global to prevent system file tampering somehow
    space_needed
    available_space

initialize window with default size and color

gui window contains 2 browse buttons with text boxes for directory navigation
one for original directory
one for new directory, upon selecting new directory location you may also choose the name of the parent file in the heirarchy

display text boxes showing original_directory_size_in_GB(original_directory/'old_master_folder') and space_needed_in_GB(new_directory/'master_folder') 

space_needed = (original_directory_size_in_GB(original_directory/'old_master_folder') + (calculated_space_taken_by_new_folders) + (cache_space_needed_while_copying_file_into_new_master_folder)

display a box that shows red if space_needed >= available_space and shows the amount of space you need to free up in order to complete the operation
else, shows green and displays (available_space - space_needed) 'Space available after operation'

display approximate time for the operation in min:sec:ms to the left of the 'Start Operation' button

settings menu (potential future release)
    colorblind modes
    light and dark mode
    logger settings
    other functionality for security features

@functions
    main
    file_date_parser('.mp3',
    directory_dialog_box
    directory_validation?
    convert_to_gb(space_needed, available_space, space_to_free_up)

def validateDirectories(directory1_path, directory2_path):
    #check directory1 exists by using the paths passed in as a variable
    #unsure of the implementation of this function so it will be deffered to a later release
    return directory1_path_status, directory2_path_status

def folder_heirarchy_creation():
    create_master_folder('master_folder_name')
    verify it exists
    open directory1

    iterate through each file "for file in folder():"
        check file date and determine if the folder corresponding to that date exists
        if not:
            create folder('file_date_here'), verify creation, move file into folder, verify file integrity (compare to original?), delete original.
        else:
            move file into corresponding folder, verify file integrity, delete original 
    #FIXME need exception handling for when the file integrity is compromised, user may choose to cancel the operation and troubleshoot their drive or try again, it will try 1x more then terminate the operation upon failure. if verification fails, end process so that it does not delete the original files (maybe save file deletion for the end of program cycle)
    
def main():
    initialize the gui with default size parameters
    button creation
    display/textbox creation

    load settings file (potential future release)

    get input for directories through 'Browse' buttons
    #future release ValidateDirectories(directory_string1, directory_string2)

    await user action to begin the process

    folder_heirarchy_creation()
    
'''
